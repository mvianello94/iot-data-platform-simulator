services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.1
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    healthcheck:
      test:
        - CMD-SHELL
        - nc -z localhost 2181 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.9.1
    container_name: kafka
    hostname: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test:
        - CMD-SHELL
        - kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 --topic iot-raw-telemetry;
        - kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 --topic iot-processed-telemetry;
        - kafka-topics --bootstrap-server localhost:9092 --list > /dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  schema-registry:
    image: confluentinc/cp-schema-registry:7.9.1
    container_name: schema-registry
    hostname: schema-registry
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://localhost:29092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      # SCHEMA_REGISTRY_DEBUG: "true"
    healthcheck:
      test:
        - CMD-SHELL
        - curl -f http://localhost:8081/subjects || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: minio
    hostname: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ':9001'
    volumes:
      - minio_data:/data
    healthcheck:
      test:
        - CMD-SHELL
        - curl -f http://localhost:9000/minio/health/live || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  minio-init:
    image: minio/mc
    container_name: minio-init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
        mc alias set local http://minio:9000 minioadmin minioadmin;
        mc ls local/iot-data >/dev/null 2>&1 || mc mb local/iot-data;
        mc policy set public local/iot-data;
      "

  postgres:
    image: postgres:14
    container_name: postgres
    hostname: postgres
    environment:
      POSTGRES_DB: iot
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  nessie:
    image: ghcr.io/projectnessie/nessie:latest
    container_name: nessie
    depends_on:
      minio:
        condition: service_healthy
    ports:
      - "19120:19120"
    volumes:
      - ./config/nessie/application.properties:/deployments/config/application.properties:ro
    environment:
      QUARKUS_PROFILE: dev
      QUARKUS_CONFIG_LOCATIONS: file:/deployments/config/application.properties

  iot-data-generator:
    build:
      context: ./iot-data-generator
    container_name: iot-data-generator
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC=iot-raw-telemetry

  spark-stream-processor:
    build:
      context: ./spark-stream-processor
    container_name: spark-stream-processor
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      PYSPARK_PYTHON: python3
      # SPARK_LOCAL_IP: 0.0.0.0
      SPARK_BLOCKMANAGER_PORT: 7079
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_RAW_DATA_TOPIC: iot-raw-telemetry
      KAFKA_PROCESSED_DATA_TOPIC: iot-processed-telemetry
      KAFKA_STARTING_OFFSETS: latest
      SPARK_STREAMING_CHECKPOINT_LOCATION: s3a://iot-data/checkpoints/spark-stream-processor/raw-telemetry
      SPARK_STREAMING_TRIGGER_INTERVAL: 30 seconds
    volumes:
      - ./config/spark/spark-stream-processor:/opt/bitnami/spark/conf

  spark-to-iceberg-processor:
    build:
      context: ./spark-to-iceberg-processor
    container_name: spark-to-iceberg-processor
    depends_on:
      kafka:
        condition: service_healthy
      nessie:
        condition: service_started
    environment:
      PYSPARK_PYTHON: python3
      # SPARK_LOCAL_IP: 0.0.0.0
      SPARK_BLOCKMANAGER_PORT: 7079
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: iot-processed-telemetry
      KAFKA_STARTING_OFFSETS: latest
      ICEBERG_CATALOG: iot_data
      ICEBERG_TABLE_IDENTIFIER: iot.telemetry
      SPARK_STREAMING_CHECKPOINT_LOCATION: s3a://iot-data/checkpoints/spark-to-iceberg-processor/processed-telemetry
      SPARK_STREAMING_TRIGGER_INTERVAL: 30 seconds
    volumes:
      - ./config/spark/spark-to-iceberg-processor:/opt/bitnami/spark/conf

  trino:
    image: trinodb/trino:latest
    container_name: trino
    depends_on:
      nessie:
        condition: service_started
    ports:
      - "8082:8080"
    volumes:
      - ./config/trino/catalog:/etc/trino/catalog

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    depends_on:
      trino:
        condition: service_started
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: trino-datasource
      GF_INSTALL_PLUGINS: trino-datasource
    volumes:
      # 'data/grafana' contains DEMO dashboards configurations
      - ./data/grafana:/var/lib/grafana
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/login"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  kafka_data:
  zookeeper_data:
  zookeeper_log:
  minio_data:
  postgres_data:
